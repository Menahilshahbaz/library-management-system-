
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
import tkinter as tk
# from tkinter import *
# Explicit imports to satisfy Flake8

from tkinter import Tk, Canvas, Button, PhotoImage, simpledialog, messagebox, ttk
from main import example

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\Admin\Desktop\Library Mangement System\assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()
window.title("Library Management System")
window.geometry("911x459")
window.configure(bg = "#FFFFFF")

def take_user_input_for_something():
    user_input = simpledialog.askstring("Input!", "Enter Here:")
    if user_input != "":
        print(user_input)

class Add_Book_Dialog(simpledialog.Dialog):
    def __init__(self, parent):
        self.book_title = None
        self.auth_name = None
        self.book_id = None
        super().__init__(parent)

    def body(self, master):
        self.geometry("300x120")  # Set the dimensions of the dialog
        tk.Label(master, text="Enter ID:").grid(row=1)
        self.book_id_entry = tk.Entry(master)
        self.book_id_entry.grid(row=1, column=1)
        tk.Label(master, text="Enter Title:").grid(row=2)
        self.book_title_entry = tk.Entry(master)
        self.book_title_entry.grid(row=2, column=1)
        tk.Label(master, text="Enter Author Name:").grid(row=3)
        self.auth_name_entry = tk.Entry(master)
        self.auth_name_entry.grid(row=3, column=1)
        return self.book_title_entry
   
    def apply(self):
        self.book_title = self.book_title_entry.get()
        self.auth_name = self.auth_name_entry.get()
        self.book_id = "BK-" + self.book_id_entry.get()

def add_book_details():
    details = Add_Book_Dialog(window)
    if details.book_title == None or details.auth_name == None:
        pass
    else:
        print(details.book_title)
        example.add_book(details.book_id, details.book_title, details.auth_name) 
        messagebox.showinfo("Success", f"Book '{details.book_title}' added successfully!")

def remove_book_details():
    book_title = simpledialog.askstring("Book Title", "Enter Book Title:") 
    if book_title == None:
        pass
    else:
        if example.remove_book(book_title):
            messagebox.showinfo("Success", f"The book titled '{book_title}' has been removed from the library.")
        else:
            messagebox.showerror("Error", f"Book titled '{book_title}' not found in the library.")

class User_Dialog(simpledialog.Dialog):
    def __init__(self, parent):
        self.book_title = None
        self.auth_name = None
        self.book_id = None
        super().__init__(parent)

    def body(self, master):
        self.geometry("300x120")  # Set the dimensions of the dialog
        tk.Label(master, text="Enter Student ID:").grid(row=1)
        self.book_title_entry = tk.Entry(master)
        self.book_title_entry.grid(row=1, column=1)
        tk.Label(master, text="Enter Book Title:").grid(row=2)
        self.auth_name_entry = tk.Entry(master)
        self.auth_name_entry.grid(row=2, column=1)
        return self.book_title_entry
   
    def apply(self):
        self.book_title = self.book_title_entry.get()
        self.auth_name = self.auth_name_entry.get()


def member_issue_book():
    details = User_Dialog(window)
    if details.book_title == None or details.auth_name == None:
        pass
    else:
        example.issue_book(details.book_title, details.auth_name)

class Book_Dialog(simpledialog.Dialog):
    def __init__(self, parent):
        self.search = None
        self.value = None
        self.book_id = None
        super().__init__(parent)

    def body(self, master):
        self.geometry("300x120")  # Set the dimensions of the dialog
        tk.Label(master, text="search by(title, book_id, author)").grid(row=1)
        self.search_entry = tk.Entry(master)
        self.search_entry.grid(row=1, column=1)
        tk.Label(master, text="Enter data").grid(row=2)
        self.value_entry = tk.Entry(master)
        self.value_entry.grid(row=2, column=1)
        return self.search_entry
   
    def apply(self):
        self.search = self.search_entry.get()
        self.value = self.value_entry.get()

def search_book():
    details = Book_Dialog(window)
    if details.search == None or details.value == None:
        pass
    else:
        print(details.search.lower())
        if details.search.lower() == "title":
            example.search_by_title(details.value)
        elif details.search.lower() == "book_id":
            example.search_by_id(details.value)
        elif details.search.lower() == "author":
            example.search_by_author(details.value)
        else:
            messagebox.showerror("Error", f"Can't able Search!")

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 459,
    width = 911,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    455.0,
    229.0,
    image=image_image_1
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    746.0,
    210.0,
    image=image_image_2
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: window.quit(),
    relief="flat"
)
button_1.place(
    x=665.0,
    y=278.0,
    width=64.0,
    height=22.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: search_book(),
    relief="flat"
)
button_2.place(
    x=638.0,
    y=199.0,
    width=119.0,
    height=30.0
)

canvas.create_text(
    40.0,
    18.0,
    anchor="nw",
    text="Library Management System ",
    fill="#1E1717",
    font=("HoltwoodOneSC", 50 * -1)
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: member_issue_book(),
    relief="flat"
)
button_3.place(
    x=638.0,
    y=235.0,
    width=119.0,
    height=30.0
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: remove_book_details(),
    relief="flat"
)
button_4.place(
    x=637.0,
    y=162.0,
    width=120.0,
    height=30.0
)

button_image_5 = PhotoImage(
    file=relative_to_assets("button_5.png"))
button_5 = Button(
    image=button_image_5,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: add_book_details(),
    relief="flat"
)
button_5.place(
    x=637.0,
    y=126.0,
    width=120.0,
    height=28.0
)
window.resizable(False, False)
window.mainloop()
